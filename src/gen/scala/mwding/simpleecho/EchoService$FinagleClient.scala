/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package mwding.simpleecho

import com.twitter.finagle.SourcedException
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.ThriftClientRequest
import com.twitter.finagle.{Service => FinagleService}
import com.twitter.scrooge.{ThriftStruct, ThriftStructCodec}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.{TMemoryBuffer, TMemoryInputTransport}
import scala.collection.{Map, Set}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-11-17T16:29:20.203-0500")
class EchoService$FinagleClient(
  val service: FinagleService[ThriftClientRequest, Array[Byte]],
  val protocolFactory: TProtocolFactory = new TBinaryProtocol.Factory,
  val serviceName: String = "",
  stats: StatsReceiver = NullStatsReceiver
) extends EchoService[Future] {
  import EchoService._

  protected def encodeRequest(name: String, args: ThriftStruct) = {
    val buf = new TMemoryBuffer(512)
    val oprot = protocolFactory.getProtocol(buf)

    oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0))
    args.write(oprot)
    oprot.writeMessageEnd()

    val bytes = Arrays.copyOfRange(buf.getArray, 0, buf.length)
    new ThriftClientRequest(bytes, false)
  }

  protected def decodeResponse[T <: ThriftStruct](resBytes: Array[Byte], codec: ThriftStructCodec[T]) = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes))
    val msg = iprot.readMessageBegin()
    try {
      if (msg.`type` == TMessageType.EXCEPTION) {
        val exception = TApplicationException.read(iprot) match {
          case sourced: SourcedException =>
            if (serviceName != "") sourced.serviceName = serviceName
            sourced
          case e => e
        }
        throw exception
      } else {
        codec.decode(iprot)
      }
    } finally {
      iprot.readMessageEnd()
    }
  }

  protected def missingResult(name: String) = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  // ----- end boilerplate.

  private[this] val scopedStats = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_echo {
    val RequestsCounter = scopedStats.scope("echo").counter("requests")
    val SuccessCounter = scopedStats.scope("echo").counter("success")
    val FailuresCounter = scopedStats.scope("echo").counter("failures")
    val FailuresScope = scopedStats.scope("echo").scope("failures")
  }
  
  
  def echo(req: SimpleRequest): Future[SimpleResponse] = {
    __stats_echo.RequestsCounter.incr()
    this.service(encodeRequest("echo", echo$args(req))) flatMap { response =>
      val result = decodeResponse(response, echo$result)
      val exception =
        None
      exception.orElse(result.success.map(Future.value)).getOrElse(Future.exception(missingResult("echo")))
    } rescue {
      case ex: SourcedException => {
        if (this.serviceName != "") { ex.serviceName = this.serviceName }
        Future.exception(ex)
      }
    } onSuccess { _ =>
      __stats_echo.SuccessCounter.incr()
    } onFailure { ex =>
      __stats_echo.FailuresCounter.incr()
      __stats_echo.FailuresScope.counter(ex.getClass.getName).incr()
    }
  }
}