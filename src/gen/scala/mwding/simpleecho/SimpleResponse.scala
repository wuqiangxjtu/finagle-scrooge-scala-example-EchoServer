/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package mwding.simpleecho

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object SimpleResponse extends ThriftStructCodec3[SimpleResponse] {
  val Struct = new TStruct("SimpleResponse")
  val ContentField = new TField("content", TType.STRING, 1)
  val ContentFieldManifest = implicitly[Manifest[String]]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: SimpleResponse) {
  }

  override def encode(_item: SimpleResponse, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): SimpleResponse = Immutable.decode(_iprot)

  def apply(
    content: String
  ): SimpleResponse = new Immutable(
    content
  )

  def unapply(_item: SimpleResponse): Option[String] = Some(_item.content)


  private def readContentValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeContentField(content_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(ContentField)
    writeContentValue(content_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeContentValue(content_item: String, _oprot: TProtocol) {
    _oprot.writeString(content_item)
  }


  private class Decoder(_iprot: TProtocol) {
    private[this] var content: String = null
    private[this] var _got_content = false
    private[this] var _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]

    private def readContent(_field: TField) {
      _field.`type` match {
        case TType.STRING => {
          content = readContentValue(_iprot)
          _got_content = true
        }
        case _ => TProtocolUtil.skip(_iprot, _field.`type`)
      }
    }

    def read(): SimpleResponse = {
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => readContent(_field)
            case _ =>
              _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      result()
    }

    def result(): SimpleResponse = {
      new Immutable(
        content,
        _passthroughFields.result()
      )
    }
  }

  object Immutable extends ThriftStructCodec3[SimpleResponse] {
    override def encode(_item: SimpleResponse, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): SimpleResponse = new Decoder(_iprot).read()
  }

  /**
   * The default read-only implementation of SimpleResponse.  You typically should not need to
   * directly reference this class; instead, use the SimpleResponse.apply method to construct
   * new instances.
   */
  class Immutable(
    val content: String,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty
  ) extends SimpleResponse

  /**
   * This Proxy trait allows you to extend the SimpleResponse trait with additional state or
   * behavior and implement the read-only methods from SimpleResponse using an underlying
   * instance.
   */
  trait Proxy extends SimpleResponse {
    protected def _underlying_SimpleResponse: SimpleResponse
    override def content: String = _underlying_SimpleResponse.content
    override def _passthroughFields = _underlying_SimpleResponse._passthroughFields
  }
}

trait SimpleResponse extends ThriftStruct
  with Product1[String]
  with java.io.Serializable
{
  import SimpleResponse._

  def content: String

  def _1 = content

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (content ne null) {
              writeContentValue(content, _oprot)
              Some(SimpleResponse.ContentField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): SimpleResponse = {
    var content: String = this.content
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        content = readContentValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      content,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): SimpleResponse = {
    var content: String = this.content

    _fieldId match {
      case 1 =>
        content = null
      case _ =>
    }
    new Immutable(
      content,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetContent: SimpleResponse = unsetField(1)


  override def write(_oprot: TProtocol) {
    SimpleResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    if (content ne null) writeContentField(content, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    content: String = this.content,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): SimpleResponse =
    new Immutable(
      content,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[SimpleResponse]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[SimpleResponse]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => content
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "SimpleResponse"
}